import { Aggregate, Document, Model, Query } from 'mongoose';
import { DocumentType } from './index';
import { Fn } from './meta';
export declare type HookType = 'pre' | 'post';
declare type DocumentMiddlewareType = 'validate' | 'save' | 'remove' | 'init';
declare type QueryMiddlewareType = 'count' | 'find' | 'findOne' | 'findOneAndRemove' | 'findOneAndUpdate' | 'update' | 'updateOne' | 'updateMany';
declare type AggregateMiddlewareType = 'aggregate';
declare type ModelMiddlewareType = 'insertMany';
export declare type ActionType = DocumentMiddlewareType | QueryMiddlewareType | AggregateMiddlewareType | ModelMiddlewareType;
declare type R<T> = T | Promise<T>;
declare type DocumentHookFunction<T> = (this: DocumentType<T>, error?: Error, doc?: DocumentType<T>, next?: Fn) => R<unknown>;
declare type QueryHookFunction<T extends Document> = (this: Query<T, T>, error?: Error, doc?: Query<T, T>, next?: Fn) => R<unknown>;
declare type AggregateHookFunction<T> = (this: Aggregate<T>, error?: Error, doc?: Aggregate<T>, next?: Fn) => R<unknown>;
declare type ModelHookFunction<T extends Document> = (this: Model<T>, error?: Error, doc?: Model<T>, next?: Fn) => R<unknown>;
declare type HookFunction<T> = T extends Document ? ModelHookFunction<T> | QueryHookFunction<T> : DocumentHookFunction<T> | AggregateHookFunction<T>;
export declare function middleware<T>(actionType: DocumentMiddlewareType, hookType: HookType, hookFunction: DocumentHookFunction<T>): any;
export declare function middleware<T extends Document>(actionType: QueryMiddlewareType, hookType: HookType, hookFunction: QueryHookFunction<T>): any;
export declare function middleware<T>(actionType: AggregateMiddlewareType, hookType: HookType, hookFunction: AggregateHookFunction<T>): any;
export declare function middleware<T extends Document>(actionType: ModelMiddlewareType, hookType: HookType, hookFunction: ModelHookFunction<T>): any;
export declare function middleware<T>(actionType: string, hookType: HookType, hookFunction: HookFunction<T>): any;
export {};
