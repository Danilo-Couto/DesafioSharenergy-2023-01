"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.forNestModule = exports.getModelName = exports.getModel = exports.getSchema = exports.ObjectId = exports.validators = void 0;
const mongoose_1 = require("mongoose");
require("reflect-metadata");
const meta_1 = require("./meta");
__exportStar(require("./model"), exports);
__exportStar(require("./schema"), exports);
__exportStar(require("./model-helper"), exports);
__exportStar(require("./middleware"), exports);
var validator_1 = require("./validator");
Object.defineProperty(exports, "validators", { enumerable: true, get: function () { return validator_1.default; } });
// mongoose shortcut
exports.ObjectId = mongoose_1.Types.ObjectId;
const modelCache = new WeakMap();
const schemaCache = new WeakMap();
function getSchema(modelClass) {
    const meta = (0, meta_1.getMongooseMeta)(modelClass.prototype);
    if (schemaCache.has(meta)) {
        return schemaCache.get(meta);
    }
    const schema = buildSchema(meta);
    schemaCache.set(meta, schema);
    return schema;
}
exports.getSchema = getSchema;
function getModel(modelClass) {
    if (modelCache.has(modelClass)) {
        return modelCache.get(modelClass);
    }
    const meta = (0, meta_1.getMongooseMeta)(modelClass.prototype);
    if (!meta.name)
        throw new Error(`name not set for model ${modelClass.constructor.name}`);
    const newModel = (0, mongoose_1.model)(meta.name, getSchema(modelClass));
    modelCache.set(modelClass, newModel);
    return newModel;
}
exports.getModel = getModel;
function getModelName(modelClass) {
    const meta = (0, meta_1.getMongooseMeta)(modelClass.prototype);
    return meta.name;
}
exports.getModelName = getModelName;
function forNestModule(modelClass) {
    return {
        name: getModelName(modelClass), schema: getSchema(modelClass),
    };
}
exports.forNestModule = forNestModule;
function buildSchema(meta) {
    const schema = new mongoose_1.Schema(meta.schema, meta.options);
    Object.keys(meta.statics)
        .forEach((name) => {
        schema.statics[name] = meta.statics[name];
    });
    Object.keys(meta.methods)
        .forEach((name) => {
        schema.methods[name] = meta.methods[name];
    });
    Object.keys(meta.queries)
        .forEach((name) => {
        schema.query[name] = meta.queries[name];
    });
    Object.keys(meta.virtuals)
        .forEach((name) => {
        const virtual = schema.virtual(name);
        const descriptor = meta.virtuals[name];
        if (descriptor.value) {
            virtual.get(descriptor.value);
        }
        else {
            if (descriptor.get)
                virtual.get(descriptor.get);
            if (descriptor.set)
                virtual.set(descriptor.set);
        }
    });
    meta.indexes.forEach(({ fields, options }) => {
        schema.index(fields, options);
    });
    meta.middleware.forEach(([actionType, hookType, fn]) => {
        schema[hookType](actionType, fn);
    });
    meta.plugins.forEach(({ plugin, options }) => {
        schema.plugin(plugin, options);
    });
    return schema;
}
//# sourceMappingURL=index.js.map