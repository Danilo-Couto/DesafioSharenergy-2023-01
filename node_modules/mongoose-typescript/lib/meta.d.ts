import { IndexDirection, IndexOptions, Schema, SchemaOptions, SchemaTypeOptions } from 'mongoose';
import { ActionType, HookType } from './middleware';
export declare type Fn = (...args: unknown[]) => unknown;
export interface IIndexArgs {
    fields: Record<string, IndexDirection>;
    options: IndexOptions;
}
export declare type IPluginType<T> = (schema: Schema, options?: T) => void;
export interface IPluginArgs<T> {
    plugin: IPluginType<T>;
    options?: T;
}
export declare class MongooseMeta {
    name: string;
    schema: Record<string, SchemaTypeOptions<unknown>>;
    statics: {
        [name: string]: Fn;
    };
    methods: {
        [name: string]: Fn;
    };
    virtuals: {
        [name: string]: PropertyDescriptor;
    };
    queries: {
        [name: string]: Fn;
    };
    indexes: IIndexArgs[];
    middleware: Array<[ActionType, HookType, Fn]>;
    plugins: Array<IPluginArgs<unknown>>;
    options: SchemaOptions;
}
export declare const mongooseMeta: unique symbol;
export interface IMongooseClass extends Object {
    [mongooseMeta]?: MongooseMeta;
    new (...args: unknown[]): unknown;
}
export declare function getMongooseMeta(target: unknown): MongooseMeta;
